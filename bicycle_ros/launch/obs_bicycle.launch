<?xml version="1.0" encoding="UTF-8"?>

<launch>
  
  <arg name="map_file" default="$(find bicycle_ros)/map/nthu_world.yaml"/>
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>
  
  <!-- TF Transform Robot To Map -->
  <!--<node pkg="tf" type="static_transform_publisher" name="tf" args="0 0 0 0 0 0 bike/base_link map 50"/>-->
  <!--<node pkg="tf" type="static_transform_publisher" name="tf2" args="0 0 0 0 0 0 map /bike/odom 50"/>-->
  <node pkg="tf" type="static_transform_publisher" name="tf22" args="0 0 0 0 0 0 /odommm /bike/base_link 5"/>
  <node pkg="tf" type="static_transform_publisher" name="marker_to_bike_tf" args="1 0 0 0 0 0 /bike/base_link /base_link 5"/>
  <node pkg="tf" type="static_transform_publisher" name="radar_to_baselink_tf" args="1 0 0 0 0 0 /bike/base_link ti_mmwave_0 100"/>
  
  <!-- Launch the 6843AOP mmwave radar -->
  <!-- Input arguments -->
  <arg name="device" value="6843" doc="TI mmWave sensor device type [1443, 1642, 6843]"/>
  <arg name="config" value="3d" doc="TI mmWave sensor device configuration [3d_best_range_res (not supported by 1642 EVM), 2d_best_range_res]"/>
  <arg name="max_allowed_elevation_angle_deg" default="90" doc="Maximum allowed elevation angle in degrees for detected object data [0 > value >= 90]}"/>
  <arg name="max_allowed_azimuth_angle_deg" default="90" doc="Maximum allowed azimuth angle in degrees for detected object data [0 > value >= 90]}"/>
  <!-- mmWave_Manager node -->
  <node pkg="ti_mmwave_rospkg" type="ti_mmwave_rospkg" name="ti_mmwave" ns="radar_0" output="screen">
    <param name="command_port" value="/dev/ttyUSB0"  />
    <param name="command_rate" value="115200"   />
    <param name="data_port" value="/dev/ttyUSB1"  />
    <param name="data_rate" value="921600"   />
    <param name="max_allowed_elevation_angle_deg" value="$(arg max_allowed_elevation_angle_deg)"   />
    <param name="max_allowed_azimuth_angle_deg" value="$(arg max_allowed_azimuth_angle_deg)"   />
    <param name="frame_id" value="/ti_mmwave_0"/>
    <param name="mmWaveCLI_name" value="/mmWaveCLI" />
    <remap from="/ti_mmwave/radar_scan_pcl" to="/ti_mmwave/radar_scan_pcl_0"/>
  </node>
  <node pkg="ti_mmwave_rospkg" type="mmWaveQuickConfig" name="ti_mmwave_config" ns="radar_0" args="$(find ti_mmwave_rospkg)/cfg/xwr68xx_AOP_21.cfg" output="screen" >
    <param name="mmWaveCLI_name" value="/mmWaveCLI" />
  </node>  
  
  
  <!-- Launch mmwave tracking -->
<!--  <node pkg="multi_object_tracking_lidar" type="kf_tracker" name="kf_tracker" output="screen" />-->
  

  
  
  <!-- Launch Gazebo -->
  <!--arg name="world" default="$(find bicycle_ros)/world/square_world.world"/-->
  <arg name="world" default="$(find bicycle_ros)/world/empty_world.world"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
    <arg name="world_name" value="$(arg world)" />
  </include>
  
  
  
    
  <!-- Place Model Into World With Namespace "bike" -->
  <group ns="/bike">
    <!-- IMPORTANT to add tf prefix -->
    <param name="tf_prefix" value="/bike" />
    
    <!-- Set Arguments -->
    <arg name="x" default="134.273"/>
    <arg name="y" default="139.296"/>
    <arg name="z" default="0.6"/>
    <arg name="Y" default="-0.65"/>
    <!--arg name="Y" default="0.0"/-->
    
    <!-- Robot Model -->
    <param name="robot_description" command="$(find xacro)/xacro $(find bicycle_ros)/urdf/bicycle.xacro ns:=/bike"/>
    
    <!-- Spawn Robot Model -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" output="screen" args="-param robot_description -urdf -model bicycle 
                -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg Y)" />        
    
    <!-- Load Controllers -->
    <rosparam file="$(find bicycle_ros)/config/controller2.yaml" command="load"/>

    <!-- Controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner"
      respawn="false" output="screen" ns="/bike" args="--namespace=/bike 
      joint_state_controller
      front_fork_controller  
      back_wheel_controller
      --timeout 60">
    </node>    
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
      <remap from="/joint_states" to="/bike/joint_states"/>
      <param name="publish_rate" type="double" value="200.0" />
      <param name="tf_prefix" value="/bike" />
    </node>
    
  </group>
  
  <!--
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher"/>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
  <arg name="model" default="$(find bicycle_ros)/urdf/bicycle.xacro "/>
  <param name="robot_description" command="$(find xacro)/xacro $(arg model)"/>-->
  
  <node pkg="odometry_tf" type="odometry_tf" name="odometry_tf" output= "screen" >
    <param name="odometry_topic_name" value="/bike/odom"/>
    <param name="frame_id" value="/map"/>
    <param name="child_frame_id" value="/odommm"/>
  </node>
  
  
  
  <arg name="rvizconfig" default="$(find bicycle_ros)/launch/display_obs.rviz"/>
  <node name="rviz" pkg="rviz" args="-d $(arg rvizconfig)" type="rviz" required="true"/>
</launch>
